{"mode":"Text","textContent":"from vex import *\n\n\ntry:\n    try:\n        load_module = print#stops vex from saying the function doesn't exist\n        screenlib_screen_menu = print\n        screenlib_screen_button = print\n        screenlib_screen_text = print\n        simplemenu_menu = print\n\n    except:\n        print(\"Failed to create load_module, screenlib_screen_(menu,button,text)\")#not sure why this would happen, but just in case\n\n    try:\n        f = open('module_loader.py', 'r'); module_loader = f.read(); f.close()#Get's the code off of the sd card\n        exec(module_loader)#Runs the code\n        try:\n            load_module('screenlib')#Loads the code in modules/screenlib.module from the sd card\n        except:\n            print(\"Failed to load screenlib, but module_loader.py loaded fine\")#The module might not be on the sd card or there it has a error\n        try:\n            load_module('simplemenulib')#Loads the code in modules/simplemenulib.module from the sd card\n        except:\n            print(\"Failed to load simplemenulib, but module_loader.py loaded file\")#The module might not be on the sd card or there it has a error\n    except:\n        print(\"module_loader.py failed to load, is it on the sd card?\")#Explains itself\nexcept:\n    print(\"Somthing really really went wrong with the module loader\")#This should never happen but just in case\n\n\n\nselected_auton = None\n\nblue_autons = ['test1','test2','test3']#The autons that can be ran, this is mainly for the menu\nred_autons = ['test1','test2','test3']#The autons that can be ran, this is mainly for the menu\n\n\n#The main menu that gets printed to the screen\ndef MainBrainMenu():\n    global selected_auton\n    #Creates a new menu\n    menu1 = simplemenu_menu()\n    \n    #This is a menu tree, a menu tree is somthing i made to make menus super fast\n    menu_tree = {\n        \"Competition\": {\n            \"text\": \"Competition\",\n            \"options\": [\n                {\n                    \"text\": \"Red\",\n                    \"options\": menu1.list_to_options(red_autons,return_value=\"comp-[text]\")#Converts red_autons into a list that's can be read by simplemenulib\n                    #return_value=\"comp-[text]\" means, when the button is clicked return the value comp-<the text of the button>\n                },\n                {\n                    \"text\": \"Blue\",\n                    \"options\": menu1.list_to_options(blue_autons,return_value=\"comp-[text]\")#Converts blue_autons into a list that's can be read by simplemenulib\n                    #return_value=\"comp-[text]\" means, when the button is clicked return the value comp-<the text of the button>\n                }\n            ]\n        },\n        \"Drive\": {\n            \"text\": \"Drive\",\n            \"return-value\": \"Drive\"\n        },\n\n        \"Auton\": {\n            \"text\": \"Auton\",\n            \"options\": [\n                {\n                    \"text\": \"Red\",\n                    \"options\": menu1.list_to_options(red_autons,return_value=\"auton-[text]\")#Converts red_autons into a list that's can be read by simplemenulib\n                    #return_value=\"comp-[text]\" means, when the button is clicked return the value comp-<the text of the button>\n                },\n                {\n                    \"text\": \"Blue\",\n                    \"options\": menu1.list_to_options(blue_autons,return_value=\"auton-[text]\")#Converts blue_autons into a list that's can be read by simplemenulib\n                    #return_value=\"comp-[text]\" means, when the button is clicked return the value comp-<the text of the button>\n                }\n            ]\n        }\n    }\n\n    selected_option = menu1.run_tree(menu_tree)#menu1.run_tree returns whatever gets selected from the menu tree\n    print(selected_option)#Just prints it for debugging\n\n    if selected_option == 'Driver':#If the button clicked was called 'Driver'\n        driver()\n    \n    elif 'comp' in selected_option:#If the button clicked was under the comp portion of the menu\n        selected_auton = selected_option.split('comp-')[1]\n        print(\"Running comp with auton \"+selected_auton)\n        Competition(driver, run_auton)\n    \n    elif 'auton' in selected_option:#If the button clicked was under the auton portion of the menu\n        selected_auton = selected_option.split('auton-')[1]\n        print(\"Running non comp auton \"+selected_auton)\n        run_auton()\n\n\ndef driver():#Driver Loop\n    while True:\n        StrafePos = controller_1.axis4.position()\n        MiddleMotor.set_velocity(StrafePos*2)\n        MiddleMotor.spin(FORWARD)\n\ndef run_auton():\n    if selected_auton == \"blahblahblah\":\n        pass\n\nMainBrainMenu()#Runs the brain menu\n\n#brain.screen.draw_image_from_file(\"download.png\",50,50)","textLanguage":"python","rconfig":[{"port":[1],"name":"MiddleMotor","customName":true,"deviceType":"Motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"split","id":"primary"},"triportSourcePort":22},{"port":[2,3,0],"name":"drivetrain","customName":false,"deviceType":"Drivetrain","setting":{"type":"2-motor","wheelSize":"wheel4in","gear":"ratio18_1","gearRatio":"1:1","direction":"fwd","gyroType":"none","width":"295","unit":"mm","wheelbase":"40","wheelbaseUnit":"mm"},"triportSourcePort":null}],"slot":0,"platform":"V5","sdkVersion":"","appVersion":"","fileFormat":"1.0.0","icon":""}
